---
title: "Untitled"
format: html
---


```{python}
import pandas as pd
import polars as pl
import duckdb
```



```{python}
nocs_pd = pd.read_csv('../data/nocs.csv')
nocs_pl = pl.read_csv('../data/nocs.csv')
#nocs.head()
```


```{python}
athletes_pd = pd.read_csv('../data/athletes.csv')
athletes_pl = pl.read_csv('../data/athletes.csv')
#athletes.head()
```

# Inner joins

```{python}
query = """
SELECT * FROM nocs_pl
"""
duckdb.sql(query)
```

```{python}
query = """
SELECT * FROM athletes_pl
"""
duckdb.sql(query)
```


```{python}
query = """
SELECT l.*, r.name, r.country_code 
FROM nocs_pl l
INNER JOIN 
athletes_pl r
ON l.code = r.country_code
"""
res_sql = duckdb.sql(query).df()
res_sql.shape
```


```{python}
res_pandas = pd.merge(nocs_pd, athletes_pd[["country_code", "name"]], left_on="code", right_on = "country_code", how='inner')
res_pandas.shape
```


```{python}
res_polars = nocs_pl.join(athletes_pl[["country_code", "name"]], left_on="code", right_on = "country_code", how='inner')
res_polars.shape
```


```{python}
res_pandas.columns
res_polars.columns
```

# Self joins

On va essayer de reconstruire les podiums

/** medal_date, discipline,event,event_type **/


```{python}
medals_pd = pd.read_csv('../data/medals.csv')
medals_pl = pl.read_csv('../data/medals.csv')
```

On agrége 1ere et 2eme place

```{python}
query = """
SELECT 
l.medal_type as medal1,
r.medal_type as medal2, 
l.medal_date,
l.name as athlete1,
r.name as athlete2,
l.discipline,
l.event,
l.event_type
FROM medals_pl l INNER JOIN medals_pl r
USING (medal_date, discipline, event, event_type)
WHERE l.medal_type = 'Gold Medal' AND r.medal_type = 'Silver Medal'
ORDER BY l.medal_date, l.name
"""
res_sql = duckdb.sql(query).df()
```

On rajoute les 3eme places


```{python}
query = """
WITH medals_1_et_2 AS (
SELECT 
l.medal_type as medal1,
r.medal_type as medal2, 
l.medal_date,
l.name as athlete1,
r.name as athlete2,
l.discipline,
l.event,
l.event_type
FROM medals_pl l INNER JOIN medals_pl r
USING (medal_date, discipline, event, event_type)
WHERE l.medal_type = 'Gold Medal' AND r.medal_type = 'Silver Medal'
ORDER BY l.medal_date, l.name
)

SELECT 
l.medal_date,
l.medal1,
l.medal2,
r.medal_type as medal3, 
l.athlete1,
l.athlete2,
r.name as athlete3,
l.discipline,
FROM medals_1_et_2 l INNER JOIN medals_pl r
USING (medal_date, discipline, event, event_type)
WHERE r.medal_type = 'Bronze Medal'
ORDER BY l.medal_date, l.athlete1
"""
res_sql = duckdb.sql(query).df()
```


# Agregations

On va recalculer les tableaux des médailles

```{python}
query = """
SELECT country, gender, COUNT(*) as nb_medals
FROM medals_pl
GROUP BY country, gender
HAVING nb_medals > 10
ORDER BY nb_medals DESC
"""
duckdb.sql(query)
```


Pays qui ont plus de médailles que la moyenne

```{python}
query = """
WITH medals_by_country AS (
SELECT country, COUNT(*) as n_medals
FROM medals_pl
GROUP BY country
),

avg_medals AS (
SELECT AVG(n_medals) as avg_medals
FROM medals_by_country
)

SELECT country, COUNT(*) as nb_medals
FROM medals_pl
GROUP BY country
HAVING nb_medals > (SELECT * FROM avg_medals)
ORDER BY nb_medals DESC
"""
res_sql = duckdb.sql(query)
```


```{python}
avg_medals = (
    medals_pd.
    groupby('country')
    ["country"].
    count().
    mean()

)

df2 = (
    medals_pd.
    groupby('country')
    ["country"].
    agg(count = 'count')
    )

df2[df2['count'] > avg_medals]
```


```{python}
avg_medals = (
    medals_pl.
    group_by(['country']).
    len(name = "nb_medals").
    mean()
)
```


```{python}
(
medals_pl.
group_by(['country']).
len(name = "nb_medals").
filter(pl.col("nb_medals") > avg_medals["nb_medals"])
)
```


# Grouping sets

Calcul des médailles par pays et gender, puis que par pays

```{python}
query = """
SELECT country_code, gender, COUNT(*) as nb_medals
FROM medals_pl
GROUP BY GROUPING SETS ((country_code, gender), country_code)
ORDER BY country_code
"""
medals_grouping_sets = duckdb.sql(query).df()
```

# Rollup

```{python}
query = """
SELECT country_code, gender, COUNT(*) as nb_medals
FROM medals_pl
GROUP BY ROLLUP (country_code, gender)
ORDER BY country_code
"""
medals_rollup = duckdb.sql(query).df()
```


# Cube

```{python}
query = """
SELECT country_code, gender, COUNT(*) as nb_medals
FROM medals_pl
GROUP BY CUBE (country_code, gender)
ORDER BY country_code
"""
medals_cube = duckdb.sql(query).df()
```


# Windows function

On va calculer les nombres de médailles sur des périodes glissantes

On va d'abord mélanger le dataset

```{python}
shuffled_medals = medals_pd.sample(frac=1).reset_index(drop=True)
```


```{python}
query = """
SELECT COUNT(*) OVER(), *
FROM shuffled_medals
"""
duckdb.sql(query)
```


```{python}
query = """
SELECT COUNT(*) OVER(ORDER BY medal_date), *
FROM shuffled_medals
"""
duckdb.sql(query)
```

# Moyenne mobile du nb de médailles

On va déjà faire un nombre de médailles par jour

```{python}
query = """
WITH medals_per_day AS (
SELECT medal_date, COUNT(*) as nb_medals
FROM shuffled_medals
GROUP BY medal_date
ORDER BY medal_date
)

SELECT * FROM medals_per_day
"""
duckdb.sql(query)
```


```{python}
query = """
WITH medals_per_day AS (
SELECT medal_date, COUNT(*) as nb_medals
FROM shuffled_medals
GROUP BY medal_date
)

SELECT medal_date, AVG(nb_medals) OVER(
ORDER BY medal_date
ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS avg_nb_medals_last_4_days
FROM medals_per_day
ORDER BY medal_date

"""
duckdb.sql(query)
```

# Partitioning

On va calculer les médailles par pays et par discipline

```{python}
query = """
WITH medals_per_day AS (
SELECT medal_date, gender, discipline, COUNT(*) as nb_medals
FROM shuffled_medals
GROUP BY medal_date, gender, discipline,
ORDER BY medal_date
)

SELECT * FROM medals_per_day
"""
duckdb.sql(query)
```

```{python}
query = """
WITH medals_per_day AS (
SELECT medal_date, country, COUNT(*) as nb_medals
FROM shuffled_medals
GROUP BY medal_date, country
)

SELECT medal_date, country, AVG(nb_medals) OVER(
PARTITION BY country
ORDER BY medal_date
ROWS BETWEEN 3 PRECEDING AND CURRENT ROW
)  AS avg_nb_medals_last_4_days
FROM medals_per_day
ORDER BY medal_date, avg_nb_medals_last_4_days DESC
"""
duckdb.sql(query)
```


# Rank 

Classement des pays par jour et par sexe

```{python}
query = """
WITH medals_per_day AS (
SELECT medal_date, country, gender, COUNT(*) as nb_medals
FROM shuffled_medals
GROUP BY medal_date, country,gender
)
SELECT medal_date, country, gender, nb_medals, DENSE_RANK() OVER( 
PARTITION BY medal_date, gender
ORDER BY medal_date, nb_medals DESC ) as classement
FROM medals_per_day
ORDER BY medal_date, classement
"""
rank = duckdb.sql(query).df()
```

# Qualify

```{python}
query = """
WITH medals_per_day AS (
SELECT medal_date, country, COUNT(*) as nb_medals
FROM shuffled_medals
GROUP BY medal_date, country
)

SELECT medal_date, country, AVG(nb_medals) OVER(
PARTITION BY country
ORDER BY medal_date
ROWS BETWEEN 3 PRECEDING AND CURRENT ROW
)  AS avg_nb_medals_last_4_days
FROM medals_per_day
QUALIFY avg_nb_medals_last_4_days > 5
ORDER BY medal_date, avg_nb_medals_last_4_days DESC
"""
duckdb.sql(query)
```


